// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudyPlannerSoft.Data;

#nullable disable

namespace StudyPlannerSoft.Migrations
{
    [DbContext(typeof(MyDatabaseContext))]
    partial class MyDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H6N7NV1KTPB9QDZ7FYDJ3HHK",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "01H6N7NV1JHYY7N2NFDYX4ATAP",
                            Name = "Deputy",
                            NormalizedName = "DEPUTY"
                        },
                        new
                        {
                            Id = "01H6N7NV1YTMCV8YPZC7QQGGG7",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "01H6N7NV18JWC8MYPXCVZR9WZW",
                            Name = "Faculty",
                            NormalizedName = "FACULTY"
                        },
                        new
                        {
                            Id = "01H6N7NV1MHQDXGNYH2HQT34V9",
                            Name = "Department",
                            NormalizedName = "DEPARTMENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "01H6N7NV2P1KCVKY7F6EJH0FAF",
                            RoleId = "01H6N7NV1KTPB9QDZ7FYDJ3HHK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FavouriteColor")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H6N7NV2P1KCVKY7F6EJH0FAF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf69eed6-ac77-4979-9452-9e10e807a71c",
                            Email = "admin@viko.lt",
                            EmailConfirmed = true,
                            FavouriteColor = "Red",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIKO.LT",
                            NormalizedUserName = "ADMIN@VIKO.LT",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJNcSUm3igslMLPfx7bEcZjEjj0Sa+ZMgTYLAKu404YDO/ncJC+Lr7dNg4laDfIlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c946b96-e231-4605-8d6d-1c05669617da",
                            TwoFactorEnabled = false,
                            UserName = "admin@viko.lt"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "01J8W2TVJEXR4D3EQRJ84FGAW4",
                            Email = "a.kirdeikiene@eif.viko.lt",
                            FacultyId = "01J8W2TVJEMFR77BG4RS58X63Z",
                            Name = "Elektronikos ir kompiuterių inžinerijos katedra",
                            ShortName = "EKIK"
                        },
                        new
                        {
                            Id = "01J8W2TVJEQ20DCNB1SCYC4ETY",
                            Email = "t.liogiene@eif.viko.lt",
                            FacultyId = "01J8W2TVJEMFR77BG4RS58X63Z",
                            Name = "Informacinių sistemų katedra",
                            ShortName = "ISK"
                        },
                        new
                        {
                            Id = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Email = "j.zailskas@eif.viko.lt",
                            FacultyId = "01J8W2TVJEMFR77BG4RS58X63Z",
                            Name = "Programinės įrangos katedra",
                            ShortName = "PĮK"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Faculty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = "01J8W2TVJEVQJXGY1VJG6TASZT",
                            Email = "administracija@atf.viko.lt",
                            Name = "Agrotechnologijų fakultetas",
                            ShortName = "ATF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEABBPVAGDFB5C8F91",
                            Email = "administracija@dif.viko.lt",
                            Name = "Dizaino fakultetas",
                            ShortName = "DIF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEMFR77BG4RS58X63Z",
                            Email = "info@eif.viko.lt",
                            Name = "Elektronikos ir informatikos fakultetas",
                            ShortName = "EIF"
                        },
                        new
                        {
                            Id = "01J8W2TVJE72Z6K5BACB4PH73G",
                            Email = "administracija@ekf.viko.lt",
                            Name = "Ekonomikos fakultetas",
                            ShortName = "EKF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEZ6RXY9149FWEMAB5",
                            Email = "administracija@pdf.viko.lt",
                            Name = "Pedagogikos fakultetas",
                            ShortName = "PDF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEFB80SD0ZQKAFZ293",
                            Email = "administracija@mtf.viko.lt",
                            Name = "Menų ir kūrybinių technologijų fakultetas",
                            ShortName = "MTF"
                        },
                        new
                        {
                            Id = "01J8W2TVJETN84GR18CQ60FR35",
                            Email = "administracija@stf.viko.lt",
                            Name = "Statybos fakultetas",
                            ShortName = "STF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEDB419ZWVQA18E0A1",
                            Email = "info@spf.viko.lt",
                            Name = "Sveikatos priežiūros fakultetas",
                            ShortName = "SPF"
                        },
                        new
                        {
                            Id = "01J8W2TVJE5V3GDVGQ1WE23Y8G",
                            Email = "administracija@tef.viko.lt",
                            Name = "Technikos fakultetas",
                            ShortName = "TEF"
                        },
                        new
                        {
                            Id = "01J8W2TVJEE2EP44S0FKVB9CT3",
                            Email = "administracija@vvf.viko.lt",
                            Name = "Verslo vadybos fakultetas",
                            ShortName = "VVF"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CurrentYear")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OtherType")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterType")
                        .HasColumnType("integer");

                    b.Property<int>("Vf")
                        .HasColumnType("integer");

                    b.Property<int>("Vnf")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PlannedGroups");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Pab")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = "01J8W2TVJESVNWGJ82ATQ52PFE",
                            Description = "Lektorius 760 val.",
                            Name = "Lektorius",
                            Pab = 8.6999999999999993
                        },
                        new
                        {
                            Id = "01J8W2TVJEEFM1PPND0VYFZ68Q",
                            Description = "Asitentas mokslininkas 460 val.",
                            Name = "Asistentas",
                            Pab = 9.6999999999999993
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StudyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("StudyPrograms");

                    b.HasData(
                        new
                        {
                            Id = "01J8W2TVJEA1HKBBNFJRR411A8",
                            DepartmentId = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Name = "Programinės įrangos testavimas",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J8W2TVJE3JVG0EXTP88TWS8N",
                            DepartmentId = "01J8W2TVJEXR4D3EQRJ84FGAW4",
                            Name = "Elektronikos inžinerija",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J8W2TVJEPF67KY2E08ZMMA9B",
                            DepartmentId = "01J8W2TVJEXR4D3EQRJ84FGAW4",
                            Name = "Elektronikos inžinerija",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J8W2TVJESJKASAFHZYXX728G",
                            DepartmentId = "01J8W2TVJEQ20DCNB1SCYC4ETY",
                            Name = "Informacijos sistemos",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J8W2TVJENY5C2BRW0QSEB8HD",
                            DepartmentId = "01J8W2TVJEQ20DCNB1SCYC4ETY",
                            Name = "Informacijos sistemos",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J8W2TVJEPT9546YQGPD14A69",
                            DepartmentId = "01J8W2TVJEQ20DCNB1SCYC4ETY",
                            Name = "Informacijos sistemos",
                            StudyType = 3
                        },
                        new
                        {
                            Id = "01J8W2TVJE89KE2X65EFDHVDDW",
                            DepartmentId = "01J8W2TVJEXR4D3EQRJ84FGAW4",
                            Name = "Kompiuterių inžinerija",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J8W2TVJE92M0XWVVACEGQD1P",
                            DepartmentId = "01J8W2TVJEXR4D3EQRJ84FGAW4",
                            Name = "Kompiuterių inžinerija",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J8W2TVJE2ZNJE3T33MZJNPXZ",
                            DepartmentId = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Name = "Programų sistemos",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J8W2TVJE3F47K4N9N4XFMGFE",
                            DepartmentId = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Name = "Programų sistemos",
                            StudyType = 4
                        },
                        new
                        {
                            Id = "01J8W2TVJEQ06N16FBFPW72KRC",
                            DepartmentId = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Name = "Programų sistemos",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J8W2TVJE1R10SF27MQ69T1ZY",
                            DepartmentId = "01J8W2TVJE15DPDWHDM94SPF5Y",
                            Name = "Programų sistemos",
                            StudyType = 3
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<double>("ConsultationCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("CourseWorkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("EvaluationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("ExamHours")
                        .HasColumnType("double precision");

                    b.Property<double>("FinalProjectExamCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("GradingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("GradingNumberCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("HomeworkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("LectureHours")
                        .HasColumnType("double precision");

                    b.Property<int>("LecturesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("OtherContactHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherNonContactCount")
                        .HasColumnType("double precision");

                    b.Property<double>("PracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("PracticeReportHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteLectureHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemotePracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteTeachingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("SelfStudyHours")
                        .HasColumnType("double precision");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("StudyProgramId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubGroupsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Lecturer", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyPlannerSoft.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Subject", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.StudyProgram", "StudyProgram")
                        .WithMany("Subjects")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.Navigation("Lecturers");

                    b.Navigation("StudyPrograms");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudyPlannerSoft.Data;

#nullable disable

namespace StudyPlannerSoft.Migrations
{
    [DbContext(typeof(MyDatabaseContext))]
    partial class MyDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LecturerSubject", b =>
                {
                    b.Property<string>("LecturersId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectsId")
                        .HasColumnType("text");

                    b.HasKey("LecturersId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("SubjectLecturers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H6N7NV1KTPB9QDZ7FYDJ3HHK",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "01H6N7NV1JHYY7N2NFDYX4ATAP",
                            Name = "Deputy",
                            NormalizedName = "DEPUTY"
                        },
                        new
                        {
                            Id = "01H6N7NV1YTMCV8YPZC7QQGGG7",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "01H6N7NV18JWC8MYPXCVZR9WZW",
                            Name = "Faculty",
                            NormalizedName = "FACULTY"
                        },
                        new
                        {
                            Id = "01H6N7NV1MHQDXGNYH2HQT34V9",
                            Name = "Department",
                            NormalizedName = "DEPARTMENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "01H6N7NV2P1KCVKY7F6EJH0FAF",
                            RoleId = "01H6N7NV1KTPB9QDZ7FYDJ3HHK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FavouriteColor")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01H6N7NV2P1KCVKY7F6EJH0FAF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca39ec9a-ad72-4d62-820c-d0c4a679cf91",
                            Email = "admin@viko.lt",
                            EmailConfirmed = true,
                            FavouriteColor = "Red",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIKO.LT",
                            NormalizedUserName = "ADMIN@VIKO.LT",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFQHbX1k+rgmdLskDSnALLgaKsGSlgJ4Vumoc4L4R9Y6nbf6h9lgJwoCR/CusLhWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae80f2b8-34b2-4362-8ec1-e8b932e94697",
                            TwoFactorEnabled = false,
                            UserName = "admin@viko.lt"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "01J9DYQEJX68GAWTMJ58XA9MZ5",
                            Email = "a.kirdeikiene@eif.viko.lt",
                            FacultyId = "01J9DYQEJXBSHVG5K2FSCJK91V",
                            Name = "Elektronikos ir kompiuterių inžinerijos katedra",
                            ShortName = "EKIK"
                        },
                        new
                        {
                            Id = "01J9DYQEJX63QCPHMYZEMTVQ0F",
                            Email = "t.liogiene@eif.viko.lt",
                            FacultyId = "01J9DYQEJXBSHVG5K2FSCJK91V",
                            Name = "Informacinių sistemų katedra",
                            ShortName = "ISK"
                        },
                        new
                        {
                            Id = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Email = "j.zailskas@eif.viko.lt",
                            FacultyId = "01J9DYQEJXBSHVG5K2FSCJK91V",
                            Name = "Programinės įrangos katedra",
                            ShortName = "PĮK"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Faculty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = "01J9DYQEJX13K7KJMCYW8RPVW1",
                            Email = "administracija@atf.viko.lt",
                            Name = "Agrotechnologijų fakultetas",
                            ShortName = "ATF"
                        },
                        new
                        {
                            Id = "01J9DYQEJX08106EXE70C2WBBE",
                            Email = "administracija@dif.viko.lt",
                            Name = "Dizaino fakultetas",
                            ShortName = "DIF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXBSHVG5K2FSCJK91V",
                            Email = "info@eif.viko.lt",
                            Name = "Elektronikos ir informatikos fakultetas",
                            ShortName = "EIF"
                        },
                        new
                        {
                            Id = "01J9DYQEJX3QZ6AT3WCTYQNVRB",
                            Email = "administracija@ekf.viko.lt",
                            Name = "Ekonomikos fakultetas",
                            ShortName = "EKF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXS1Z4BDXDEHS9CQZA",
                            Email = "administracija@pdf.viko.lt",
                            Name = "Pedagogikos fakultetas",
                            ShortName = "PDF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXSWQ6QCDAVEMRHPSY",
                            Email = "administracija@mtf.viko.lt",
                            Name = "Menų ir kūrybinių technologijų fakultetas",
                            ShortName = "MTF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXX5YTVB3011ZRJYY8",
                            Email = "administracija@stf.viko.lt",
                            Name = "Statybos fakultetas",
                            ShortName = "STF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXA3GQ894J67QC2EGQ",
                            Email = "info@spf.viko.lt",
                            Name = "Sveikatos priežiūros fakultetas",
                            ShortName = "SPF"
                        },
                        new
                        {
                            Id = "01J9DYQEJXFDF4N2QDXDD29M45",
                            Email = "administracija@tef.viko.lt",
                            Name = "Technikos fakultetas",
                            ShortName = "TEF"
                        },
                        new
                        {
                            Id = "01J9DYQEJX3MXMET6Q5T83VJWQ",
                            Email = "administracija@vvf.viko.lt",
                            Name = "Verslo vadybos fakultetas",
                            ShortName = "VVF"
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlannedSubjectId")
                        .HasColumnType("text");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PlannedSubjectId");

                    b.HasIndex("PositionId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("LabelName")
                        .HasColumnType("text");

                    b.Property<string>("LecturerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OtherType")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("StudyProgramId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubGroupCount")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("1");

                    b.Property<int?>("Vf")
                        .HasColumnType("integer");

                    b.Property<int?>("Vnf")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("PlannedGroups");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<double>("ConsultationCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("CourseWorkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("ExamHours")
                        .HasColumnType("double precision");

                    b.Property<double>("FinalProjectExamCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("GradingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("GradingNumberCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("HomeworkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("LectureHours")
                        .HasColumnType("double precision");

                    b.Property<int>("LecturesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double?>("OtherContactHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherNonContactCount")
                        .HasColumnType("double precision");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<string>("PlannedGroupId")
                        .HasColumnType("text");

                    b.Property<double>("PracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("PracticeReportHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteLectureHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemotePracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteTeachingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("SelfStudyHours")
                        .HasColumnType("double precision");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("StudyProgramId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubGroupsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PlanId");

                    b.HasIndex("PlannedGroupId");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("PlannedSubjects");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Pab")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = "01J9DYQEJXEGZKC667HYJWDCGW",
                            Description = "Profesorius",
                            Name = "Profesorius_23",
                            Pab = 2.4199999999999999
                        },
                        new
                        {
                            Id = "01J9DYQEJXSRHTS6MGNF83K0AJ",
                            Description = "Docento, turinčio mokslo daktaro laipsnį",
                            Name = "Docentas_23",
                            Pab = 2.02
                        },
                        new
                        {
                            Id = "01J9DYQEJXCW47NR0S5RMNBWE5",
                            Description = "Docento, pripažinto menininko, o taip pat AT pritarimu vieneriems metams priimamam asmeniui, turinčiam didelę praktinę patirtį dėstomo dalyko srityje ir magistro kvalifikacinį laipsnį ar jam prilygintą aukštojo mokslo kvalifikaciją",
                            Name = "Docentas_menininkas_23",
                            Pab = 1.77
                        },
                        new
                        {
                            Id = "01J9DYQEJX2TEDTPKZHEPZ4551",
                            Description = "Lektoriaus, turinčio mokslo daktaro laipsnį",
                            Name = "Lektorius dr._23",
                            Pab = 1.72
                        },
                        new
                        {
                            Id = "01J9DYQEJXJ2C7HAZ0ZKBX6Z18",
                            Description = "Lektorius",
                            Name = "Lektorius_23 (d)",
                            Pab = 1.6000000000000001
                        },
                        new
                        {
                            Id = "01J9DYQEJX5KFGGB4CX5S39TY4",
                            Description = "Lektorius",
                            Name = "Lektorius_23 (m)",
                            Pab = 1.4299999999999999
                        },
                        new
                        {
                            Id = "01J9DYQEJX548AQC9B6Y81VR3K",
                            Description = "Asistento, turinčio magistro laipsnį",
                            Name = "Asistentas_23 (mag.)",
                            Pab = 1.3300000000000001
                        },
                        new
                        {
                            Id = "01J9DYQEJXSRJTY310G1Y6QGAG",
                            Description = "Asistento, turinčio bakalauro arba profesinio bakalauro laipsnį",
                            Name = "Asistentas_23 (bak.)",
                            Pab = 1.3100000000000001
                        },
                        new
                        {
                            Id = "01J9DYQEJXB6QXHHNYH6FWHS8P",
                            Description = "Profesorius",
                            Name = "Profesorius_24",
                            Pab = 2.4199999999999999
                        },
                        new
                        {
                            Id = "01J9DYQEJXPFBF9A2M4WHEQBFQ",
                            Description = "Kviestinis profesorius",
                            Name = "Profesorius_Kv_24",
                            Pab = 2.4199999999999999
                        },
                        new
                        {
                            Id = "01J9DYQEJXR995PY06ZACP236R",
                            Description = "Docentas",
                            Name = "Docentas_24",
                            Pab = 2.02
                        },
                        new
                        {
                            Id = "01J9DYQEJXPDVA8CV13VXV9C4F",
                            Description = "Kviestinis docentas",
                            Name = "Docentas_Kv_24",
                            Pab = 2.02
                        },
                        new
                        {
                            Id = "01J9DYQEJX8X0VC6MYVMMGSWMW",
                            Description = "Asistentas",
                            Name = "Asistentas_24",
                            Pab = 1.8400000000000001
                        },
                        new
                        {
                            Id = "01J9DYQEJXJKTCQQCQFPX6QGGC",
                            Description = "Jaunesnysis asistentas",
                            Name = "Jaunesnysis asistentas_24",
                            Pab = 1.78
                        },
                        new
                        {
                            Id = "01J9DYQEJXRWCKNZ922ZYWMXYY",
                            Description = "Vyresnysis lektorius",
                            Name = "Vyresnysis lektorius_24",
                            Pab = 1.72
                        },
                        new
                        {
                            Id = "01J9DYQEJXXWASW96HPZD26JHB",
                            Description = "Lektorius",
                            Name = "Lektorius_24",
                            Pab = 1.6000000000000001
                        },
                        new
                        {
                            Id = "01J9DYQEJX310ZXFEBVZWYE3ZW",
                            Description = "Dėstytojas praktikas",
                            Name = "Dėstytojas praktikas_24",
                            Pab = 1.72
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StudyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("StudyPrograms");

                    b.HasData(
                        new
                        {
                            Id = "01J9DYQEJXJBMG4F2K0BE48RJH",
                            DepartmentId = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Name = "Programinės įrangos testavimas",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J9DYQEJX2H3Z4W2QFCDBMHCJ",
                            DepartmentId = "01J9DYQEJX68GAWTMJ58XA9MZ5",
                            Name = "Elektronikos inžinerija",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J9DYQEJX1PCG4GRQV3HTBFDR",
                            DepartmentId = "01J9DYQEJX68GAWTMJ58XA9MZ5",
                            Name = "Elektronikos inžinerija",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J9DYQEJXV9EG5CJ4T3SX195G",
                            DepartmentId = "01J9DYQEJX63QCPHMYZEMTVQ0F",
                            Name = "Informacijos sistemos",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J9DYQEJXX7MYFE4EH3K97RM2",
                            DepartmentId = "01J9DYQEJX63QCPHMYZEMTVQ0F",
                            Name = "Informacijos sistemos",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J9DYQEJXSXBSET1Y0VBS77JJ",
                            DepartmentId = "01J9DYQEJX63QCPHMYZEMTVQ0F",
                            Name = "Informacijos sistemos",
                            StudyType = 3
                        },
                        new
                        {
                            Id = "01J9DYQEJXWS07ZH806H3WZ46V",
                            DepartmentId = "01J9DYQEJX68GAWTMJ58XA9MZ5",
                            Name = "Kompiuterių inžinerija",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J9DYQEJXY2CM0EC2BT8JBHRH",
                            DepartmentId = "01J9DYQEJX68GAWTMJ58XA9MZ5",
                            Name = "Kompiuterių inžinerija",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J9DYQEJX9DHTHTPM9S02X94V",
                            DepartmentId = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Name = "Programų sistemos",
                            StudyType = 1
                        },
                        new
                        {
                            Id = "01J9DYQEJX44AP7MHAAWMBCM73",
                            DepartmentId = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Name = "Programų sistemos",
                            StudyType = 4
                        },
                        new
                        {
                            Id = "01J9DYQEJXKZFDFMJPA6BMGP0N",
                            DepartmentId = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Name = "Programų sistemos",
                            StudyType = 2
                        },
                        new
                        {
                            Id = "01J9DYQEJXT7AWYWA72WH5WFN9",
                            DepartmentId = "01J9DYQEJXV9YH477ZVSHXNAGW",
                            Name = "Programų sistemos",
                            StudyType = 3
                        });
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<double>("ConsultationCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("CourseWorkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("ExamHours")
                        .HasColumnType("double precision");

                    b.Property<double>("FinalProjectExamCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("GradingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("GradingNumberCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("HomeworkHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("LectureHours")
                        .HasColumnType("double precision");

                    b.Property<int>("LecturesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double?>("OtherContactHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherNonContactCount")
                        .HasColumnType("double precision");

                    b.Property<double>("PracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("PracticeReportHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteLectureHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemotePracticeHours")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemoteTeachingHoursCount")
                        .HasColumnType("double precision");

                    b.Property<double>("SelfStudyHours")
                        .HasColumnType("double precision");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("StudyProgramId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SubGroupsCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StudyProgramId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("LecturerSubject", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyPlannerSoft.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Lecturer", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyPlannerSoft.Entities.PlannedSubject", null)
                        .WithMany("Lecturers")
                        .HasForeignKey("PlannedSubjectId");

                    b.HasOne("StudyPlannerSoft.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedGroup", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Lecturer", "Lecturer")
                        .WithMany("PlannedGroups")
                        .HasForeignKey("LecturerId");

                    b.HasOne("StudyPlannerSoft.Entities.StudyProgram", "StudyProgram")
                        .WithMany("PlannedGroups")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedSubject", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("PlanSubjects")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StudyPlannerSoft.Entities.Plan", "Plan")
                        .WithMany("PlanSubjects")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudyPlannerSoft.Entities.PlannedGroup", "PlannedGroup")
                        .WithMany("PlanSubjects")
                        .HasForeignKey("PlannedGroupId");

                    b.HasOne("StudyPlannerSoft.Entities.StudyProgram", "StudyProgram")
                        .WithMany("PlanSubjects")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Plan");

                    b.Navigation("PlannedGroup");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Subject", b =>
                {
                    b.HasOne("StudyPlannerSoft.Entities.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("StudyPlannerSoft.Entities.StudyProgram", "StudyProgram")
                        .WithMany("Subjects")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Department", b =>
                {
                    b.Navigation("Lecturers");

                    b.Navigation("PlanSubjects");

                    b.Navigation("StudyPrograms");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Lecturer", b =>
                {
                    b.Navigation("PlannedGroups");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.Plan", b =>
                {
                    b.Navigation("PlanSubjects");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedGroup", b =>
                {
                    b.Navigation("PlanSubjects");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.PlannedSubject", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("StudyPlannerSoft.Entities.StudyProgram", b =>
                {
                    b.Navigation("PlanSubjects");

                    b.Navigation("PlannedGroups");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
